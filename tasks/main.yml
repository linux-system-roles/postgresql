# SPDX-License-Identifier: MIT
---
# Put the tasks for your role here.

- name: Set platform/version specific variables
  include_tasks: tasks/set_vars.yml

- name: Gather the package facts
  package_facts:

- name: Check if requested version is supported in the system (RHEL8)
  fail:
    msg: RHEL 8 supports only Postgresql 10, 12 and 13
  when:
    - ansible_facts["os_family"] == "RedHat"
    - ansible_facts["distribution_major_version"] == "8"
    - postgresql_version | string not in __postgresql_versions_el8

- name: Check if requested version is supported in system (RHEL9)
  fail:
    msg: RHEL 9 supports only Postgresql 13
  when:
    - ansible_facts["os_family"] == "RedHat"
    - ansible_facts["distribution_major_version"] == "9"
    - postgresql_version | string not in __postgresql_versions_el9

- name: Check requested and installed version of Postgresql
  fail:
    msg: >-
      Setting version {{ postgresql_version }} while
      {{ ansible_facts.packages['postgresql'][0].version }} is installed
  when:
    - "'postgresql' in ansible_facts.packages"
    - ansible_facts.packages["postgresql"][0].version |
      regex_search('([0-9]*).', '\\1') | first != postgresql_version | string

- name: Ensure required packages are installed
  package:
    name: "{{ __postgresql_packages }}"
    state: present

- name: Init DB
  when: not __postgresql_conf.stat.exists
  block:
    - name: Init DB
      command:
        cmd: postgresql-setup --initdb
        creates: /var/lib/pgsql/data/postgresql.conf

    - name: Start Postgresql server
      service:
        name: postgresql
        state: started
        enabled: true

- name: Enable and start existing instance of postgresql server
  service:
    name: postgresql
    state: started
    enabled: true

- name: Set and enable password
  when: postgresql_password is not none
  block:
    - name: Set password for super user
      become: true
      become_user: postgres
      environment:
        PGPASSWORD: "{{ postgresql_password }}"
      command:
        cmd: >
          psql -c "ALTER USER postgres WITH ENCRYPTED PASSWORD
          '{{ postgresql_password }}';"
      no_log: true
      changed_when: false

    - name: Enable logging in by password
      replace:
        path: /var/lib/pgsql/data/pg_hba.conf
        regexp: '(peer|ident)$'
        replace: 'md5'
        backup: true
      notify: Restart postgresql

- name: Run provided SQL script
  include_tasks: input_sql_file.yml
  when: postgresql_input_file is defined

- name: Manage certificates
  include_tasks: certificate.yml

- name: Enable SSL
  replace:
    path: /var/lib/pgsql/data/postgresql.conf
    regexp: '#(ssl\s=\s).*$'
    replace: '\1on'
  when:
    - postgresql_ssl_enable
  notify: Restart postgresql

- name: Set up recommanded shared_buffers size
  replace:
    path: "/var/lib/pgsql/data/postgresql.conf"
    regexp: '(shared_buffers\s=\s)([0-9]+)(\w\w)'
    replace: '\1 {{ (ansible_memory_mb.real.total / 4) | int | abs }}MB'
  when: postgresql_server_tuning
  notify: Restart postgresql

- name: Set up recommended cache_size
  replace:
    path: "/var/lib/pgsql/data/postgresql.conf"
    regexp: '#(effective_cache_size\s=\s)[0-9]+\w\w'
    replace: '\1 {{ (ansible_memory_mb.real.total / 2) | int | abs }}MB'
  when: postgresql_server_tuning
  notify: Restart postgresql

- name: Configure pg_hba.conf
  become: true
  template:
    backup: true
    dest: "/var/lib/pgsql/data/pg_hba.conf"
    src: pg_hba.conf.j2
    mode: 0600
    owner: postgres
    group: postgres
  when: postgresql_pg_hba_conf is defined
  notify: Restart postgresql

- name: Generate postgresql system-roles.conf
  when: postgresql_server_conf is defined
  block:
    - name: Create postgresql directory in /etc
      file:
        path: /etc/postgresql
        state: directory
        mode: '0755'

    - name: Generate postgresql system-roles.conf
      become: true
      template:
        backup: true
        dest: "/etc/postgresql/system-roles.conf"
        src: postgresql.conf.j2
        mode: 0600
        owner: postgres
        group: postgres

    - name: Link generated conf file with server one
      lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        line: "include_if_exists = '/etc/postgresql/system-roles.conf'"
      notify: Restart postgresql
